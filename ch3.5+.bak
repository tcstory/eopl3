#lang eopl


(define (nameless-environment? x)
  ((list-of expval?) x))

(define (empty-nameless-env)
  '())

(define (extend-nameless-env var nameless-env)
  (cons val nameless-env))

(define (apply-nameless-env nameless-env n)
  (list-ref nameless-env n))

(define (empty-senv)
  '())

(define (extend-senv var senv)
  (cons var senv))

(define (apply-senv senv var)
  (cond
    ((null? senv)
     (eopl:error 'report-unbound-var var))
    ((eqv? var (car senv))
     0)
    (else
     (+ 1 (apply-senv (cdr senv) var)))))

(define (translation-of-program pgm)
  (cases program pgm
    (a-program (exp)
               (a-program
                (translation-of exp (init-senv))))))

(define (translation-of exp senv)
  (cases expression exp
    (const-exp (num) (const-exp num))
    (diff-exp (exp1 exp2)
              (diff-exp
               (translation-of exp1)
               (translation-of exp2)))
    (zero?-exp (exp)
               (zero?-exp
                (translation-of exp)))
    (if-exp (exp1 exp2 exp3)
            (if-exp
             (translation-of exp1 senv)
             (translation-of exp2 senv)
             (translation-of exp3 senv)))
    (var-exp (var)
             (nameless-var-exp
              (apply-senv senv var)))
    (let-exp (var exp body)
             (nameless-let-exp
              (translation-of exp senv)
              (translation-of body
                              (extend-senv var senv))))
    (proc-exp (var body)
              (nameless-proc-exp
               (translation-of body
                               (extend-senv var senv))))
    (call-exp (rator rand)
              (call-exp
               (translation-of rator senv)
               (translation-of rand senv)))
    (else
     (eopl:error 'report-invalid-source-expression exp)))) 